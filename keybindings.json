// spell-checker: disable
[
  { "key": "ctrl+alt+,", "command": "workbench.action.openSettingsJson" },
  { "key": "ctrl+alt+.", "command": "workbench.action.openGlobalKeybindingsFile" },
  { "key": "ctrl+alt+/", "command": "workbench.action.openSnippets" },
  
  { "key": "ctrl+shift+-", "command": "workbench.action.zoomReset" },
  
  { "key": "alt+shift+=", "command": "increaseSearchEditorContextLines", "when": "inSearchEditor" },
  { "key": "alt+shift+-", "command": "editor.action.commentLine", "when": "editorTextFocus && !editorReadonly" },
  { "key": "alt+shift+;", "command": "workbench.action.toggleMaximizeEditorGroup", "when": "editorPartMaximizedEditorGroup || editorPartMultipleEditorGroups" },
  { "key": "alt+shift+;", "command": "workbench.action.toggleMaximizedPanel", "when": "panelFocus" },
  { "key": "alt+shift+,", "command": "editor.action.quickFix", "when": "editorHasCodeActionsProvider && textInputFocus && !editorReadonly" },
  { "key": "alt+shift+`", "command": "workbench.action.toggleSplitEditorInGroupLayout" },
  { "key": "alt+shift+7", "command": "workbench.action.reloadWindow" },
  { "key": "alt+\\", "command": "workbench.action.joinAllGroups" },
  { "key": "alt+shift+\\", "command": "workbench.action.focusActiveEditorGroup", "when": "!editorTextFocus || focusedView == 'workbench.panel.output'" },
  { "key": "shift+alt+5", "command": "editor.action.blockComment", "when": "editorTextFocus && !editorReadonly" }, 
  
//  { "key": "ctrl+alt+w", "command": "workbench.action.toggleEditorWidths" },
//  { "key": "ctrl+alt+e", "command": "workbench.action.evenEditorWidths" },
  
//  { "key": "ctrl+alt+-", "command": "editor.action.fontZoomOut" },
//  { "key": "ctrl+alt+=", "command": "editor.action.fontZoomReset" },
//  { "key": "ctrl+alt+shift+=", "command": "editor.action.fontZoomIn" },

  // git
  { "key": "ctrl+g ctrl+g", "command": "workbench.action.gotoLine" },
  { "key": "ctrl+g q", "command": "git.unstage" }, // Quit from stage
  { "key": "ctrl+g w", "command": "git.stage" }, // Write into stage
  { "key": "ctrl+g f", "command": "git.fetch" },
  { "key": "ctrl+g p", "command": "git.pull" },
  { "key": "ctrl+g b", "command": "git.checkout" }, // Branch
  { "key": "ctrl+g a", "command": "git.commitAmend" },
  { "key": "ctrl+g r", "command": "git.revertSelectedRanges" },
  { "key": "ctrl+g s", "command": "git.sync" },
  { "key": "ctrl+g t", "command": "git.createTag" },
  { "key": "ctrl+g g", "command": "gidt.merge" },
  { "key": "ctrl+g z", "command": "git.undoCommit" },
  // { "key": "ctrl+g x", "command": "git.deleteBranch" },
  { "key": "ctrl+g c", "command": "git.commit" },
  { "key": "ctrl+g d", "command": "git.deleteBranch" },
  { "key": "ctrl+g v", "command": "git.openChange" }, // View changes
  { "key": "ctrl+g space", "command": "git.clone" },

  // fix
  { "key": "ctrl+shift+.", "command": "-breadcrumbs.focusAndSelect", "when": "breadcrumbsPossible && breadcrumbsVisible" },
  { "key": "ctrl+enter", "command": "-github.copilot.generate", "when": "editorTextFocus && github.copilot.activated && !commentEditorFocused" },

  // vim fix
  { "key": "ctrl+down", "command": "-extension.vim_ctrl+down", "when": "editorTextFocus && vim.active && !inDebugRepl && vim.mode != 'Insert'" },
  { "key": "ctrl+up", "command": "-extension.vim_ctrl+up", "when": "editorTextFocus && vim.active && !inDebugRepl && vim.mode != 'Insert'" },
  { "key": "shift+alt+down", "command": "-extension.vim_cmd+alt+down", "when": "editorTextFocus && vim.active && !inDebugRepl" },
  { "key": "shift+alt+up", "command": "-extension.vim_cmd+alt+up", "when": "editorTextFocus && vim.active && !inDebugRepl" },
  { "key": "shift+;", "command": "vim.showQuickpickCmdLine", "when": "inZenMode && vim.mode != 'Insert'" },
  { "key": "escape", "command": "-extension.vim_escape", "when": "editorTextFocus && vim.active && !inDebugRepl" },
  {
    "key": "escape",
    "command": "extension.vim_escape",
    "when": "editorTextFocus && vim.active && !inDebugRepl && !inlineSuggestionVisible && !suggestWidgetVisible && !notificationToastsVisible && !codeActionMenuVisible && !pasteWidgetVisible && !dropWidgetVisible && !parameterHintsVisible && !breakpointWidgetVisible"
  }
]
