{
	// basic
	"const": { "prefix": "c", "body": "const " },
	"arrow function": { "prefix": "af", "body": "($1) => ", },
	"function": { "prefix": "f", "body": "function $1($2) {\n  $3\n}", },
	"method": { "prefix": "m", "body": "$1($2) {\n  $3\n}" }, 
	"if": { "prefix": "if", "body": "if ($1) {\n  $2\n}" },
	"forin": { "prefix": "forin", "body": "for (const $1 in $2) {\n  $3\n}" },
	"forof": { "prefix": "forof", "body": "for (const $1 of $2) {\n  $3\n}" },
	// async
	"async": { "prefix": "as", "body": "async " },
	"await": { "prefix": "aw", "body": "await " },
	"new Promise": { "prefix": "np", "body": "new Promise((resolve, reject) => $1)" },
	// jsdoc
	"jsdoc comment": { "prefix": "/", "body": "/** $1 */", },
	"jsdoc inline type": { "prefix": "t", "body": "/** @type {$1} */", },
	"jsdoc @typedef": { "prefix": "td", "body": "@typedef {$1} ", },
	"jsdoc @param": { "prefix": "p", "body": "@param {$1} ", },
	"jsdoc @return": { "prefix": "r", "body": "@return {$1} ", },
	"jsdoc @overload": { "prefix": "o", "body": "@overload ", },
	"jsdoc @template": { "prefix": "tem", "body": "@template ", },
	// console
	"console.log": { "prefix": "cl", "body": "console.log($1)" },
	"console.debug": { "prefix": "cd", "body": "console.debug($1)" },
	"console.info": { "prefix": "ci", "body": "console.info($1)" },
	"console.warn": { "prefix": "cw", "body": "console.warn($1)" },
	"console.error": { "prefix": "cr", "body": "console.error($1)" },
	"console.group": { "prefix": "cg", "body": "console.group($1)" },
	"console.groupCollapsed": { "prefix": "cgc", "body": "console.groupCollapsed($1)" },
	"console.groupEnd": { "prefix": "cge", "body": "console.groupEnd($1)" },
	"console.time": { "prefix": "ct", "body": "console.time($1)" },
	"console.timeLog": { "prefix": "ctl", "body": "console.timeLog($1)" },
	"console.timeEnd": { "prefix": "cte", "body": "console.timeEnd($1)" },
	// event loop
	"setTimeout": { "prefix": "st", "body": "setTimeout(() => {\n  $2\n}, $1)", },
	"setInterval": { "prefix": "si", "body": "setInterval(() => {\n  $2\n}, $1)", },
	"requestAnimationFrame": { "prefix": "raf", "body": "requestAnimationFrame(() => {\n  $1\n})", },
	// array
	"find": { "prefix": ".find", "body": ".find(($1) => $2)" },
	"findIndex": { "prefix": ".findindex", "body": ".findIndex(($1) => $2)" },
	"forEach": { "prefix": ".foreach", "body": ".forEach(($1) => {\n  $2\n})" },
	"map": { "prefix": ".map", "body": ".map(($1) => $2)" },
	"flatMap": { "prefix": ".flatmap", "body": ".flatMap(($1) => $2)" },
	"filter": { "prefix": ".filter", "body": ".filter(($1) => $2)" },
	"some": { "prefix": ".some", "body": ".some(($1) => $2)" },
	"every": { "prefix": ".every", "body": ".every(($1) => $2)" },
	"reduce": { "prefix": ".reduce", "body": ".reduce((${2:acc}, ${3:cur}) => ${4}, ${1})" },
}
